[{"title":"兄弟们冲冲冲！","url":"/2021/03/16/first%20blog/","content":"<h1 id=\"欢迎来到我的blog\"><a href=\"#欢迎来到我的blog\" class=\"headerlink\" title=\"欢迎来到我的blog\"></a>欢迎来到我的blog</h1><p>然后懒人表示什么都没有更新！<br>记得别咸鱼！</p>\n"},{"title":"算法复习","url":"/2021/03/20/java-suanfa/","content":"<h1 id=\"二分查找算法\"><a href=\"#二分查找算法\" class=\"headerlink\" title=\"二分查找算法\"></a>二分查找算法</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarysearch</span><span class=\"params\">(<span class=\"keyword\">int</span> []array,<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> high=array.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">        mid=(low+high)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[mid]==a)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a&gt;array[mid])&#123;</span><br><span class=\"line\">            low=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            high=mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"冒泡算法\"><a href=\"#冒泡算法\" class=\"headerlink\" title=\"冒泡算法\"></a>冒泡算法</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] bubbleSort(<span class=\"keyword\">int</span>[] arr)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;arr.length-<span class=\"number\">1</span>-i;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[j]&gt;arr[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j]=arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j+<span class=\"number\">1</span>]=temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] insertSort(<span class=\"keyword\">int</span>[] arr)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> insertVal=arr[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index=i-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(index&gt;=<span class=\"number\">0</span>&amp;&amp;insertVal&lt;arr[index])&#123;</span><br><span class=\"line\">\t\t\tarr[index+<span class=\"number\">1</span>]=arr[index];</span><br><span class=\"line\">\t\t\tindex--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tarr[index+<span class=\"number\">1</span>]=insertVal;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> []quickSort(<span class=\"keyword\">int</span> []arr,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> start=low;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> end=high;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> key=arr[start];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(end&gt;start)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(end&gt;start&amp;&amp;arr[end]&gt;=key)&#123;</span><br><span class=\"line\">\t\t\tend--;<span class=\"comment\">//找到比key小的值</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(arr[end]&lt;=key)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp=arr[end];</span><br><span class=\"line\">\t\t\tarr[end]=arr[start];</span><br><span class=\"line\">\t\t\tarr[start]=temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(end&gt;start&amp;&amp;arr[start]&lt;=key)&#123;</span><br><span class=\"line\">\t\t\tstart++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(arr[start]&gt;=key)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp=arr[start];</span><br><span class=\"line\">\t\t\tarr[start]=arr[end];</span><br><span class=\"line\">\t\t\tarr[end]=temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//递归左边序列</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(start&gt;low)&#123;</span><br><span class=\"line\">\t\tquickSort(arr,low,start-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//递归右边序列-+4</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(end&lt;high)&#123;</span><br><span class=\"line\">\t\tquickSort(arr.end+<span class=\"number\">1</span>,high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"]},{"title":"HTML学习","url":"/2021/03/18/html-learning/","content":"<h1 id=\"HTML简介\"><a href=\"#HTML简介\" class=\"headerlink\" title=\"HTML简介\"></a>HTML简介</h1><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>html learning<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>标题一<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>段落一<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>!DOCTYPE html 声明为 HTML5 文档</li>\n<li>html 元素是 HTML 页面的根元素</li>\n<li>head元素包含了文档的元（meta）数据，如 meta charset=”utf-8”定义网页编码格式为 <strong>utf-8</strong>。</li>\n</ul>\n<p>只有 body区域 (白色部分) 才会在浏览器中显示。</p>\n<h1 id=\"HTML-基础\"><a href=\"#HTML-基础\" class=\"headerlink\" title=\"HTML 基础\"></a>HTML 基础</h1><p>HTML 标题（Heading）是通过h1-h6标签来定义的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    标题一</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>HTML 段落是通过标签 p 来定义的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    段落一</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>HTML 链接是通过标签 a来定义的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://&quot;</span>&gt;</span></span><br><span class=\"line\">   链接一</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>HTML 图像是通过标签 img 来定义的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">loading</span>=<span class=\"string\">&quot;porrige&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/images/logo.jpg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;258&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;39&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"HTML元素\"><a href=\"#HTML元素\" class=\"headerlink\" title=\"HTML元素\"></a>HTML元素</h1><p>如果您希望在不产生一个新段落的情况下进行换行（新行），请使用 br标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML属性\"><a href=\"#HTML属性\" class=\"headerlink\" title=\"HTML属性\"></a>HTML属性</h1><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>class</td>\n<td>为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td>\n</tr>\n<tr>\n<td>id</td>\n<td>定义元素的唯一id</td>\n</tr>\n<tr>\n<td>style</td>\n<td>规定元素的行内样式（inline style）</td>\n</tr>\n<tr>\n<td>title</td>\n<td>描述了元素的额外信息 (作为工具条使用)</td>\n</tr>\n</tbody></table>\n<h1 id=\"HTML标题\"><a href=\"#HTML标题\" class=\"headerlink\" title=\"HTML标题\"></a>HTML标题</h1><p>标题（Heading）是通过 h1-h6标签进行定义的。</p>\n<p>h1定义最大的标题（主要）。 h6定义最小的标题（次要）。</p>\n<h2 id=\"HTML水平线\"><a href=\"#HTML水平线\" class=\"headerlink\" title=\"HTML水平线\"></a>HTML水平线</h2><p>hr标签在 HTML 页面中创建水平线。</p>\n<p>hr 元素可用于分隔内容。</p>\n<h2 id=\"HTML-注释\"><a href=\"#HTML-注释\" class=\"headerlink\" title=\"HTML 注释\"></a>HTML 注释</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注释 --&gt;</span></span><br></pre></td></tr></table></figure>","categories":["HTML"]},{"title":"自己写输入输出问题","url":"/2021/03/20/javacode-io/","content":"<h1 id=\"1-基本定义\"><a href=\"#1-基本定义\" class=\"headerlink\" title=\"1. 基本定义\"></a>1. 基本定义</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tScanner cin1 = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        Scanner cin2 = <span class=\"keyword\">new</span> Scanner(<span class=\"keyword\">new</span> BufferedInputStream(System.in));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用cin2进行输入的时候会比cin1快一些。</p>\n<h1 id=\"2-输入具体数据\"><a href=\"#2-输入具体数据\" class=\"headerlink\" title=\"2. 输入具体数据\"></a>2. 输入具体数据</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n = cin.nextInt();<span class=\"comment\">//输入一个整数</span></span><br><span class=\"line\">String s = cin.next();<span class=\"comment\">//输入一个字符串</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> f = cin.nextDouble();<span class=\"comment\">//输入一个浮点数</span></span><br><span class=\"line\">String s = cin.nextLine();<span class=\"comment\">//输入一整行</span></span><br></pre></td></tr></table></figure>\n\n<p>可以使用cin.hasNext()来判断是否有下一个输入</p>\n<h1 id=\"3-基本输出\"><a href=\"#3-基本输出\" class=\"headerlink\" title=\"3. 基本输出\"></a>3. 基本输出</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">System.out.print();  <span class=\"comment\">//类似于cout&lt;&lt;…….;</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println();  <span class=\"comment\">//类似于cout&lt;&lt;……&lt;&lt;endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.printf();  <span class=\"comment\">//类似于C中printf的功能</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-要求具体精度输出\"><a href=\"#4-要求具体精度输出\" class=\"headerlink\" title=\"4. 要求具体精度输出\"></a>4. 要求具体精度输出</h1><p>（1）可以使用上面介绍的System.out.printf();</p>\n<p>（2）对于输出浮点数要保留几位小数的问题，可以使用DecimalFormat类解决</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> pi = <span class=\"number\">3.1415927</span>;<span class=\"comment\">//圆周率</span></span><br><span class=\"line\"><span class=\"comment\">//取一位整数</span></span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">&quot;0&quot;</span>).format(pi));<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//取一位整数和两位小数</span></span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">&quot;0.00&quot;</span>).format(pi));<span class=\"comment\">//3.14</span></span><br><span class=\"line\"><span class=\"comment\">//取两位整数和三位小数，整数不足部分以0填补。</span></span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">&quot;00.000&quot;</span>).format(pi));<span class=\"comment\">// 03.142</span></span><br><span class=\"line\"><span class=\"comment\">//取所有整数部分</span></span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">&quot;#&quot;</span>).format(pi));<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//以百分比方式计数，并取两位小数</span></span><br><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">&quot;#.##%&quot;</span>).format(pi));<span class=\"comment\">//314.16%</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-字符串的处理\"><a href=\"#5-字符串的处理\" class=\"headerlink\" title=\"5. 字符串的处理\"></a>5. 字符串的处理</h1><p>String。Java中字符串String是不可以修改的，要修改只能转换为字符数组。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String st = <span class=\"string\">&quot;abcdefg&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span>[] ch;</span><br><span class=\"line\"></span><br><span class=\"line\">ch = st.toCharArray(); <span class=\"comment\">// 字符串转换为字符数组.</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"6-实例\"><a href=\"#6-实例\" class=\"headerlink\" title=\"6. 实例\"></a>6. 实例</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">        String[] params = br.readLine().trim().split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = Integer.parseInt(params[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = Integer.parseInt(params[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = Integer.parseInt(params[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        String[] strArr = br.readLine().trim().split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] scores = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) scores[i] = Integer.parseInt(strArr[i]);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有输入输出写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">        BufferedWriter writer = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(System.out));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> T = Integer.parseInt(reader.readLine());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; T; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> N = Integer.parseInt(reader.readLine());</span><br><span class=\"line\">            String tables = reader.readLine();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> M = Integer.parseInt(reader.readLine());</span><br><span class=\"line\">            String enters = reader.readLine();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] res = solve(tables, enters);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> r : res) &#123;</span><br><span class=\"line\">                writer.write(Integer.toString(r));</span><br><span class=\"line\">                writer.newLine();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        writer.flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"]},{"title":"网络编程","url":"/2021/03/18/network-coding/","content":"<h1 id=\"IP\"><a href=\"#IP\" class=\"headerlink\" title=\"IP\"></a>IP</h1><p>ip地址：InetAddress</p>\n<ul>\n<li><p>127.0.0.1 ：本机localhost</p>\n</li>\n<li><p>ip地址的分类</p>\n</li>\n<li><ul>\n<li>ipv4/ipv6</li>\n<li><ul>\n<li>IPV4 4个字节组成</li>\n<li>IPV6 128位，8个无符号整数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li></li>\n</ul>\n"},{"title":"try to upload","url":"/2021/03/17/try-to-upload/","content":"<p><img src=\"/images/pasted-210317pjl.jpg\" alt=\"pjl\"><br><img src=\"/images/pasted-210317whz.jpg\" alt=\"pjl\"></p>\n"},{"title":"数据库面试知识点记录","url":"/2021/03/24/210324Database/","content":"<h1 id=\"1-数据库范式\"><a href=\"#1-数据库范式\" class=\"headerlink\" title=\"1.数据库范式\"></a>1.数据库范式</h1><ul>\n<li><p>第一范式：列不可分，eg:【联系人】（姓名，性别，电话），一个联系人有家庭电话和公司电话，那么这种表结构设计就没有达到 1NF；</p>\n</li>\n<li><p>第二范式：有主键，保证完全依赖。eg:订单明细表【OrderDetail】（OrderID，ProductID，UnitPrice，Discount，Quantity，ProductName），Discount（折扣），Quantity（数量）完全依赖（取决）于主键（OderID，ProductID），而 UnitPrice，ProductName 只依赖于 ProductID，不符合2NF；</p>\n</li>\n<li><p>第三范式：无传递依赖(非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况)，eg:订单表【Order】（OrderID，OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity）主键是（OrderID），CustomerName，CustomerAddr，CustomerCity 直接依赖的是 CustomerID（非主键列），而不是直接依赖于主键，它是通过传递才依赖于主键，所以不符合 3NF。</p>\n</li>\n</ul>\n<h1 id=\"2-数据库索引\"><a href=\"#2-数据库索引\" class=\"headerlink\" title=\"2.数据库索引\"></a>2.数据库索引</h1><p><strong>索引是对数据库表中一个或多个列的值进行排序的数据结构，以协助快速查询、更新数据库表中数据。</strong>索引的实现通常使用B_TREE及其变种。索引加速了数据访问，因为存储引擎不会再去扫描整张表得到需要的数据；相反，它从根节点开始，根节点保存了子节点的指针，存储引擎会根据指针快速寻找数据。</p>\n<h2 id=\"1-索引的底层实现原理和优化\"><a href=\"#1-索引的底层实现原理和优化\" class=\"headerlink\" title=\"1). 索引的底层实现原理和优化\"></a>1). 索引的底层实现原理和优化</h2><p>　　在数据结构中，我们最为常见的搜索结构就是二叉搜索树和AVL树(高度平衡的二叉搜索树，为了提高二叉搜索树的效率，减少树的平均搜索长度)了。然而，无论二叉搜索树还是AVL树，当数据量比较大时，都会由于树的深度过大而造成I/O读写过于频繁，进而导致查询效率低下，因此对于索引而言，多叉树结构成为不二选择。特别地，B-Tree的各种操作能使B树保持较低的高度，从而保证高效的查找效率。<br>(1). B-Tree(平衡多路查找树)</p>\n<p>　　B_TREE是一种平衡多路查找树，是一种动态查找效率很高的树形结构。B_TREE中所有结点的孩子结点的最大值称为B_TREE的阶，B_TREE的阶通常用m表示，简称为m叉树。一般来说，应该是m&gt;=3。一颗m阶的B_TREE或是一颗空树，或者是满足下列条件的m叉树：</p>\n<p>树中每个结点最多有m个孩子结点；</p>\n<p>若根结点不是叶子节点，则根结点至少有2个孩子结点；</p>\n<p>除根结点外，其它结点至少有(m/2的上界)个孩子结点；</p>\n<p>结点的结构如下图所示，其中，n为结点中关键字个数，(m/2的上界)-1 &lt;= n &lt;= m-1；di(1&lt;=i&lt;=n)为该结点的n个关键字值的第i个，且di&lt; d(i+1)；ci(0&lt;=i&lt;=n)为该结点孩子结点的指针，且ci所指向的节点的关键字均大于或等于di且小于d(i+1)；</p>\n<p>　　　　　　　　　　<img src=\"http://static.zybuluo.com/Rico123/4clzcd69i34ihxiddnsorkza/B-Tree%E7%BB%93%E7%82%B9%E7%9A%84%E7%BB%93%E6%9E%84.png\" alt=\"B-Tree结点的结构.png-1.7kB\"></p>\n<p>所有的叶结点都在同一层上，并且不带信息（可以看作是外部结点或查找失败的结点，实际上这些结点不存在，指向这些结点的指针为空）。</p>\n<p>　　下图是一棵4阶B_TREE，4叉树结点的孩子结点的个数范围[2,4]。其中，有2个结点有4个孩子结点，有1个结点有3个孩子结点，有5个结点有2个孩子结点。</p>\n<p>　　　<img src=\"http://static.zybuluo.com/Rico123/z66j4t1g8jknavzqweyikezd/4%E9%98%B6B_TREE.jpg\" alt=\"4阶B_TREE.jpg-24.1kB\">　　</p>\n<p>　　B_TREE的查找类似二叉排序树的查找，所不同的是B-树每个结点上是多关键码的有序表，在到达某个结点时，先在有序表中查找，若找到，则查找成功；否则，到按照对应的指针信息指向的子树中去查找，当到达叶子结点时，则说明树中没有对应的关键码。由于B_TREE的高检索效率，B-树主要应用在文件系统和数据库中，对于存储在硬盘上的大型数据库文件，可以极大程度减少访问硬盘次数，大幅度提高数据检索效率。</p>\n<p>(2). B+Tree ： <strong>InnoDB存储引擎的索引实现</strong></p>\n<p>　　B+Tree是应文件系统所需而产生的一种B_TREE树的变形树。一棵m阶的B+树和m阶的B_TREE的差异在于以下三点：</p>\n<ul>\n<li><p>n 棵子树的结点中含有n个关键码；</p>\n</li>\n<li><p>所有的叶子结点中包含了全部关键码的信息，及指向含有这些关键码记录的指针，且叶子结点本身依关键码的大小自小而大的顺序链接；</p>\n</li>\n<li><p>非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键码。</p>\n</li>\n</ul>\n<p>　　下图为一棵3阶的B+树。通常在B+树上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点。因此可以对B+树进行两种查找运算：一种是从最小关键字起顺序查找，另一种是从根节点开始，进行随机查找。<br>在B+树上进行随机查找、插入和删除的过程基本上与B-树类似。只是在查找时，若非终端结点上的关键码等于给定值，并不终止，而是继续向下直到叶子结点。因此，对于B+树，不管查找成功与否，每次查找都是走了一条从根到叶子结点的路径。</p>\n<p>　　　　　　　　　　<img src=\"http://static.zybuluo.com/Rico123/ynugdx0avoy5blfq6gkb0tv2/3%E9%98%B6B+%E6%A0%91.jpg\" alt=\"一棵3阶的B+树.jpg-29.9kB\"></p>\n<p>(3). 为什么说B+-tree比B 树更适合实际应用中操作系统的文件索引和数据库索引？</p>\n<ul>\n<li><p>B+tree的磁盘读写代价更低：B+tree的内部结点并没有指向关键字具体信息的指针(红色部分)，因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多，相对来说IO读写次数也就降低了；</p>\n</li>\n<li><p>B+tree的查询效率更加稳定：由于内部结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引，所以，任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当；</p>\n</li>\n<li><p>数据库索引采用B+树而不是B树的主要原因：B+树只要遍历叶子节点就可以实现整棵树的遍历，而且在数据库中基于范围的查询是非常频繁的，而B树只能中序遍历所有节点，效率太低。</p>\n</li>\n</ul>\n<p>(4). 文件索引和数据库索引为什么使用B+树?</p>\n<p>　　文件与数据库都是需要较大的存储，也就是说，它们都不可能全部存储在内存中，故需要存储到磁盘上。而所谓索引，则为了数据的快速定位与查找，那么索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数，因此B+树相比B树更为合适。数据库系统巧妙利用了局部性原理与磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入，而红黑树这种结构，高度明显要深的多，并且由于逻辑上很近的节点(父子)物理上可能很远，无法利用局部性。最重要的是，B+树还有一个最大的好处：方便扫库。B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持，这是数据库选用B+树的最主要原因。</p>\n<h2 id=\"2-索引的优点\"><a href=\"#2-索引的优点\" class=\"headerlink\" title=\"2). 索引的优点\"></a>2). 索引的优点</h2><p>大大加快数据的检索速度，这也是创建索引的最主要的原因；</p>\n<p>加速表和表之间的连接；</p>\n<p>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间；</p>\n<p>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性；</p>\n<h2 id=\"3-什么情况下设置了索引但无法使用？\"><a href=\"#3-什么情况下设置了索引但无法使用？\" class=\"headerlink\" title=\"3). 什么情况下设置了索引但无法使用？\"></a>3). 什么情况下设置了索引但无法使用？</h2><p>以“%(表示任意0个或多个字符)”开头的LIKE语句，模糊匹配；</p>\n<p>OR语句前后没有同时使用索引；</p>\n<p>数据类型出现隐式转化（如varchar不加单引号的话可能会自动转换为int型）；</p>\n<p>对于多列索引，必须满足 最左匹配原则 (eg：多列索引col1、col2和col3，则 索引生效的情形包括 col1或col1，col2或col1，col2，col3)。</p>\n<h2 id=\"4-什么样的字段适合创建索引？\"><a href=\"#4-什么样的字段适合创建索引？\" class=\"headerlink\" title=\"4). 什么样的字段适合创建索引？\"></a>4). 什么样的字段适合创建索引？</h2><p>经常作查询选择的字段</p>\n<p>经常作表连接的字段</p>\n<p>经常出现在order by, group by, distinct 后面的字段</p>\n<h2 id=\"5-创建索引时需要注意什么？\"><a href=\"#5-创建索引时需要注意什么？\" class=\"headerlink\" title=\"5). 创建索引时需要注意什么？\"></a>5). 创建索引时需要注意什么？</h2><p>非空字段：应该指定列为NOT NULL，除非你想存储NULL。在mysql中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值；</p>\n<p>取值离散大的字段：（变量各个取值之间的差异程度）的列放到联合索引的前面，可以通过count()函数查看字段的差异值，返回值越大说明字段的唯一值越多字段的离散程度高；</p>\n<p>索引字段越小越好：数据库的数据存储以页为单位一页存储的数据越多一次IO操作获取的数据越大效率越高。</p>\n<h2 id=\"6-索引的缺点\"><a href=\"#6-索引的缺点\" class=\"headerlink\" title=\"6). 索引的缺点\"></a>6). 索引的缺点</h2><p>时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度；</p>\n<p>空间方面：索引需要占物理空间。</p>\n<h2 id=\"7-索引的分类\"><a href=\"#7-索引的分类\" class=\"headerlink\" title=\"7). 索引的分类\"></a>7). 索引的分类</h2><p>普通索引和唯一性索引：索引列的值的唯一性</p>\n<p>单个索引和复合索引：索引列所包含的列数</p>\n<p>聚簇索引与非聚簇索引：聚簇索引按照数据的物理存储进行划分的。对于一堆记录来说，使用聚集索引就是对这堆记录进行堆划分，即主要描述的是物理上的存储。正是因为这种划分方法，导致聚簇索引必须是唯一的。聚集索引可以帮助把很大的范围，迅速减小范围。但是查找该记录，就要从这个小范围中Scan了；而非聚集索引是把一个很大的范围，转换成一个小的地图，然后你需要在这个小地图中找你要寻找的信息的位置，最后通过这个位置，再去找你所需要的记录。</p>\n<h2 id=\"8-主键、自增主键、主键索引与唯一索引概念区别\"><a href=\"#8-主键、自增主键、主键索引与唯一索引概念区别\" class=\"headerlink\" title=\"8). 主键、自增主键、主键索引与唯一索引概念区别\"></a>8). 主键、自增主键、主键索引与唯一索引概念区别</h2><p>主键：指字段 唯一、不为空值 的列；</p>\n<p>主键索引：指的就是主键，主键是索引的一种，是唯一索引的特殊类型。创建主键的时候，数据库默认会为主键创建一个唯一索引；</p>\n<p>自增主键：字段类型为数字、自增、并且是主键；</p>\n<p>唯一索引：索引列的值必须唯一，但允许有空值。主键是唯一索引，这样说没错；但反过来说，唯一索引也是主键就错误了，因为唯一索引允许空值，主键不允许有空值，所以不能说唯一索引也是主键。</p>\n<h2 id=\"9-主键就是聚集索引吗？主键和索引有什么区别？\"><a href=\"#9-主键就是聚集索引吗？主键和索引有什么区别？\" class=\"headerlink\" title=\"9). 主键就是聚集索引吗？主键和索引有什么区别？\"></a>9). 主键就是聚集索引吗？主键和索引有什么区别？</h2><p>　　主键是一种特殊的唯一性索引，其可以是聚集索引，也可以是非聚集索引。在SQLServer中，主键的创建必须依赖于索引，默认创建的是聚集索引，但也可以显式指定为非聚集索引。InnoDB作为MySQL存储引擎时，默认按照主键进行聚集，如果没有定义主键，InnoDB会试着使用唯一的非空索引来代替。如果没有这种索引，InnoDB就会定义隐藏的主键然后在上面进行聚集。所以，对于聚集索引来说，你创建主键的时候，自动就创建了主键的聚集索引。</p>\n<h1 id=\"3-数据库事务\"><a href=\"#3-数据库事务\" class=\"headerlink\" title=\"3.数据库事务\"></a>3.数据库事务</h1><p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。</p>\n<h2 id=\"事务的特征\"><a href=\"#事务的特征\" class=\"headerlink\" title=\"事务的特征\"></a>事务的特征</h2><ul>\n<li><p>原子性(Atomicity)：事务所包含的一系列数据库操作要么全部成功执行，要么全部回滚；</p>\n</li>\n<li><p>一致性(Consistency)：事务的执行结果必须使数据库从一个一致性状态到另一个一致性状态；</p>\n</li>\n<li><p>隔离性(Isolation)：并发执行的事务之间不能相互影响；</p>\n</li>\n<li><p>持久性(Durability)：事务一旦提交，对数据库中数据的改变是永久性的。</p>\n</li>\n</ul>\n<h2 id=\"事务并发带来的问题\"><a href=\"#事务并发带来的问题\" class=\"headerlink\" title=\"事务并发带来的问题\"></a>事务并发带来的问题</h2><ul>\n<li>丢失修改：丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。</li>\n</ul>\n<p><img src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221744244.png\" alt=\"img\"></p>\n<ul>\n<li>脏读：一个事务读取了另一个事务未提交的数据；</li>\n</ul>\n<p><img src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221920368.png\" alt=\"img\"></p>\n<ul>\n<li>不可重复读：不可重复读的重点是<strong>修改</strong>，同样条件下两次读取结果不同，也就是说，被读取的数据可以被其它事务修改；</li>\n</ul>\n<p><img src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222102010.png\" alt=\"img\"></p>\n<ul>\n<li>幻读：幻读的重点在于<strong>新增或者删除</strong>，同样条件下两次读出来的记录数不一样。</li>\n</ul>\n<p><img src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222134306.png\" alt=\"img\"></p>\n<h2 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h2><h3 id=\"未提交读（READ-UNCOMMITTED）\"><a href=\"#未提交读（READ-UNCOMMITTED）\" class=\"headerlink\" title=\"未提交读（READ UNCOMMITTED）\"></a>未提交读（READ UNCOMMITTED）</h3><p>事务中的修改，即使没有提交，对其它事务也是可见的。</p>\n<h3 id=\"提交读（READ-COMMITTED）\"><a href=\"#提交读（READ-COMMITTED）\" class=\"headerlink\" title=\"提交读（READ COMMITTED）\"></a>提交读（READ COMMITTED）</h3><p>一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。</p>\n<h3 id=\"可重复读（REPEATABLE-READ）\"><a href=\"#可重复读（REPEATABLE-READ）\" class=\"headerlink\" title=\"可重复读（REPEATABLE READ）\"></a>可重复读（REPEATABLE READ）</h3><p>保证在同一个事务中多次读取同一数据的结果是一样的。（在一个事务开始后，其他事务对数据库的修改在本事务中不可见，直到本事务commit或rollback。但是，其他事务的insert/delete操作对该事务是可见的，也就是说，该隔离级别并不能避免幻读问题。在一个事务中重复select的结果一样，除非本事务中update数据库。）</p>\n<h3 id=\"可串行化-serializable-可串行化（SERIALIZABLE）\"><a href=\"#可串行化-serializable-可串行化（SERIALIZABLE）\" class=\"headerlink\" title=\"可串行化-serializable)可串行化（SERIALIZABLE）\"></a>可串行化-serializable)可串行化（SERIALIZABLE）</h3><p>强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。</p>\n<p>该隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行，也就是保证事务串行执行。</p>\n<hr>\n<p><img src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207223400787.png\" alt=\"img\"></p>\n<p>ps：MySQL默认的隔离级别是可重复读REPEATABLE READ。</p>\n<h2 id=\"4-MySQL的事务支持\"><a href=\"#4-MySQL的事务支持\" class=\"headerlink\" title=\"4.MySQL的事务支持\"></a>4.MySQL的事务支持</h2><p>MySQL的事务支持不是绑定在MySQL服务器本身，而是与存储引擎相关：</p>\n<ul>\n<li>MyISAM：不支持事务，用于只读程序提高性能；</li>\n<li>InnoDB：支持ACID事务、行级锁、并发；</li>\n<li>Berkeley DB：支持事务。</li>\n</ul>\n<h1 id=\"5-MySQL中的悲观锁与乐观锁的实现\"><a href=\"#5-MySQL中的悲观锁与乐观锁的实现\" class=\"headerlink\" title=\"5.MySQL中的悲观锁与乐观锁的实现\"></a>5.MySQL中的悲观锁与乐观锁的实现</h1><ol>\n<li>悲观锁</li>\n</ol>\n<p>悲观锁的特点是先获取锁，再进行业务操作，即“悲观”的认为所有的操作均会导致并发安全问题，因此要先确保获取锁成功再进行业务操作。   </p>\n<ol start=\"2\">\n<li>乐观锁</li>\n</ol>\n<p>乐观锁的特点先进行业务操作，只在最后实际更新数据时进行检查数据是否被更新过，若未被更新过，则更新成功；否则，失败重试。乐观锁在数据库上的实现完全是逻辑的，不需要数据库提供特殊的支持。一般的做法是在需要锁的数据上增加一个版本号或者时间戳，然后按照如下方式实现：</p>\n<ol start=\"3\">\n<li>悲观锁与乐观锁的应用场景</li>\n</ol>\n<p>一般情况下，<strong>读多写少更适合用乐观锁，读少写多更适合用悲观锁</strong>。乐观锁在不发生取锁失败的情况下开销比悲观锁小，但是一旦发生失败回滚开销则比较大，因此适合用在取锁失败概率比较小的场景，可以提升系统并发性能。</p>\n<h1 id=\"6-JDBC-对事务的支持\"><a href=\"#6-JDBC-对事务的支持\" class=\"headerlink\" title=\"6.JDBC 对事务的支持\"></a>6.JDBC 对事务的支持</h1><p>对于JDBC而言，每条单独的语句都是一个事务，即每个语句后都隐含一个commit。实际上，Connection 提供了一个auto-commit的属性来指定事务何时结束。当auto-commit为true时，当每个独立SQL操作的执行完毕，事务立即自动提交，也就是说，每个SQL操作都是一个事务；当auto-commit为false时，每个事务都必须显式调用commit方法进行提交，或者显式调用rollback方法进行回滚。auto-commit默认为true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">    conn.setAutoCommit(<span class=\"keyword\">false</span>);  <span class=\"comment\">//将自动提交设置为false        </span></span><br><span class=\"line\">    ps.executeUpdate(<span class=\"string\">&quot;修改SQL&quot;</span>); <span class=\"comment\">//执行修改操作  </span></span><br><span class=\"line\">    ps.executeQuery(<span class=\"string\">&quot;查询SQL&quot;</span>);  <span class=\"comment\">//执行查询操作                 </span></span><br><span class=\"line\">    conn.commit();      <span class=\"comment\">//当两个操作成功后手动提交     </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </span><br><span class=\"line\">    conn.rollback();    <span class=\"comment\">//一旦其中一个操作出错都将回滚，使两个操作都不成功  </span></span><br><span class=\"line\">    e.printStackTrace();  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>　　为了能够将多条SQL当成一个事务执行，必须首先通过</p>\n<p>​          </p>\n","categories":["数据库"]},{"title":"操作系统面试知识点记录","url":"/2021/03/21/operating-system-interview/","content":"<h1 id=\"1-进程和线程的区别\"><a href=\"#1-进程和线程的区别\" class=\"headerlink\" title=\"1.进程和线程的区别\"></a>1.进程和线程的区别</h1><p>1）进程是资源分配的最小单位，线程是任务执行的最小单位。</p>\n<p>2）一个程序至少有一个进程，一个进程至少有一个线程，线程依赖于进程而存在。</p>\n<p>3）进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存。</p>\n<p>4）线程是进程的子任务，是CPU调度和分派的基本单位，用于保证程序的实时性，实现进程内部的并发。</p>\n<p>5）线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。</p>\n<p>6）但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</p>\n<p>速记：单位，依赖，内存，通信</p>\n<h1 id=\"2-进程的调度算法\"><a href=\"#2-进程的调度算法\" class=\"headerlink\" title=\"2.进程的调度算法\"></a>2.进程的调度算法</h1><p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p>\n<h2 id=\"1-批处理系统\"><a href=\"#1-批处理系统\" class=\"headerlink\" title=\"1. 批处理系统\"></a>1. 批处理系统</h2><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p>\n<p><strong>1.1 先来先服务 first-come first-serverd（FCFS）</strong></p>\n<p>非抢占式的调度算法，按照请求的顺序进行调度。</p>\n<p>有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。</p>\n<p><strong>1.2 短作业优先 shortest job first（SJF）</strong></p>\n<p>非抢占式的调度算法，按估计运行时间最短的顺序进行调度。</p>\n<p>长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。</p>\n<p><strong>1.3 最短剩余时间优先 shortest remaining time next（SRTN）</strong></p>\n<p>最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。</p>\n<h2 id=\"2-交互式系统\"><a href=\"#2-交互式系统\" class=\"headerlink\" title=\"2. 交互式系统\"></a>2. 交互式系统</h2><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p>\n<p><strong>2.1 时间片轮转</strong></p>\n<p>将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。</p>\n<p>时间片轮转算法的效率和时间片的大小有很大关系：</p>\n<ul>\n<li>因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。</li>\n<li>而如果时间片过长，那么实时性就不能得到保证。</li>\n</ul>\n<p><img src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8c662999-c16c-481c-9f40-1fdba5bc9167.png\" alt=\"img\"></p>\n<p><strong>2.2 优先级调度</strong></p>\n<p>为每个进程分配一个优先级，按优先级进行调度。</p>\n<p>为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p>\n<p><strong>2.3 多级反馈队列</strong></p>\n<p>一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。</p>\n<p>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。</p>\n<p>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。</p>\n<p>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</p>\n<p><img src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/042cf928-3c8e-4815-ae9c-f2780202c68f.png\" alt=\"img\"></p>\n<h2 id=\"3-实时系统\"><a href=\"#3-实时系统\" class=\"headerlink\" title=\"3. 实时系统\"></a>3. 实时系统</h2><p>实时系统要求一个请求在一个确定时间内得到响应。</p>\n<p>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p>\n<p>速记：先进先出，短作业优先，最短剩余时间优先，时间片轮转，优先级调度，多级反馈队列</p>\n<h1 id=\"3-进程间通信的几种方式\"><a href=\"#3-进程间通信的几种方式\" class=\"headerlink\" title=\"3.进程间通信的几种方式\"></a>3.进程间通信的几种方式</h1><ul>\n<li><p>管道（pipe）及命名管道（named pipe）：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；</p>\n</li>\n<li><p>信号（signal）：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；</p>\n</li>\n<li><p>消息队列：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；</p>\n</li>\n<li><p>共享内存：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等；</p>\n</li>\n<li><p>信号量：信号量是一个计数器，用于多进程对共享数据的访问。主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段；</p>\n</li>\n<li><p>套接字：此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</p>\n</li>\n</ul>\n<h1 id=\"4-线程通信的方式\"><a href=\"#4-线程通信的方式\" class=\"headerlink\" title=\"4.线程通信的方式\"></a>4.线程通信的方式</h1><p>  a) 互斥量(Mutex)：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。</p>\n<p>  b) 信号量(Semphares)：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。</p>\n<p>  c) 事件(Event):Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作</p>\n<h1 id=\"5-什么是死锁？死锁产生的条件？\"><a href=\"#5-什么是死锁？死锁产生的条件？\" class=\"headerlink\" title=\"5.什么是死锁？死锁产生的条件？\"></a>5.什么是死锁？死锁产生的条件？</h1><p>  1)死锁的概念</p>\n<p>　　在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲，就是两个或多个进程无限期的阻塞、相互等待的一种状态。</p>\n<p>2). 死锁产生的四个必要条件</p>\n<p>互斥：至少有一个资源必须属于非共享模式，即一次只能被一个进程使用；若其他申请使用该资源，那么申请进程必须等到该资源被释放为止；</p>\n<p>占有并等待：一个进程必须占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有；</p>\n<p>非抢占：进程不能被抢占，即资源只能被进程在完成任务后自愿释放</p>\n<p>循环等待：若干进程之间形成一种头尾相接的环形等待资源关系</p>\n<h1 id=\"6-死锁处理策略\"><a href=\"#6-死锁处理策略\" class=\"headerlink\" title=\"6.死锁处理策略\"></a>6.死锁处理策略</h1><p>1）死锁检测与死锁恢复</p>\n<ol>\n<li>每种类型一个资源的死锁检测（找环）</li>\n<li>每种类型多个资源的死锁检测（矩阵）</li>\n<li>死锁恢复（利用抢占恢复，利用回滚恢复，通过杀死进程恢复）</li>\n</ol>\n<p>2）死锁预防</p>\n<p>死锁预防基本原理：破坏死锁发生的四个必要条件之一不成立。</p>\n<ol>\n<li>破坏互斥条件</li>\n</ol>\n<p>例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。</p>\n<ol start=\"2\">\n<li>破坏占有和等待条件</li>\n</ol>\n<p>一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。</p>\n<ol start=\"3\">\n<li><p>破坏不可抢占条件</p>\n</li>\n<li><p>破坏环路等待</p>\n</li>\n</ol>\n<p>给资源统一编号，进程只能按编号顺序来请求资源。</p>\n<h1 id=\"7-进程有哪几种状态\"><a href=\"#7-进程有哪几种状态\" class=\"headerlink\" title=\"7.进程有哪几种状态\"></a>7.进程有哪几种状态</h1><ul>\n<li>就绪状态（ready）：等待被调度</li>\n<li>运行状态（running）</li>\n<li>阻塞状态（waiting）：等待资源</li>\n</ul>\n<p>应该注意以下内容：</p>\n<ol>\n<li>只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。</li>\n<li>阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。</li>\n</ol>\n<h1 id=\"8-线程有几种状态\"><a href=\"#8-线程有几种状态\" class=\"headerlink\" title=\"8.线程有几种状态\"></a>8.线程有几种状态</h1><p>在 Java虚拟机 中，线程从最初的创建到最终的消亡，要经历若干个状态：创建(new)、就绪(runnable/start)、运行(running)、阻塞(blocked)、等待(waiting)、时间等待(time waiting) 和 消亡(dead/terminated)。在给定的时间点上，一个线程只能处于一种状态，各状态的含义如下图所示：</p>\n<p><img src=\"http://static.zybuluo.com/Rico123/ot7o6218591iwj9py999hs1u/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.jpg\" alt=\"线程的状态.jpg-59.9kB\"></p>\n<h1 id=\"9-虚拟内存\"><a href=\"#9-虚拟内存\" class=\"headerlink\" title=\"9.虚拟内存\"></a>9.虚拟内存</h1><p><strong>虚拟内存使得应用程序认为它拥有一个连续的地址空间，而实际上，它通常是被分隔成多个物理内存碎片，还有一部分存储在外部磁盘存储器上，在需要时进行数据交换。</strong></p>\n<p>虚拟内存的<strong>目的</strong>是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。</p>\n<p>虚拟内存的<strong>基本思想</strong>是：每个进程拥有独立的地址空间，这个空间被分为大小相等的多个块，称为页(Page)，每个页都是一段连续的地址。这些页被映射到物理内存，但并不是所有的页都必须在内存中才能运行程序。当程序引用到一部分在物理内存中的地址空间时，由硬件立刻进行必要的映射；当程序引用到一部分不在物理内存中的地址空间时，由操作系统负责将缺失的部分装入物理内存并重新执行失败的命令。这样，对于进程而言，逻辑上似乎有很大的内存空间，实际上其中一部分对应物理内存上的一块(称为帧，通常页和帧大小相等)，还有一些没加载在内存中的对应在硬盘上。</p>\n<p>虚拟内存<strong>优点</strong>：</p>\n<ul>\n<li><p>在内存中可以保留多个进程，系统并发度提高</p>\n</li>\n<li><p>解除了用户与内存之间的紧密约束，进程可以比内存的全部空间还大</p>\n</li>\n</ul>\n<h1 id=\"10-页面置换算法\"><a href=\"#10-页面置换算法\" class=\"headerlink\" title=\"10.页面置换算法\"></a>10.页面置换算法</h1><ul>\n<li><p>FIFO先进先出算法：在操作系统中经常被用到，比如作业调度（主要实现简单，很容易想到）；</p>\n</li>\n<li><p>LRU（Least recently use）最近最少使用算法：根据使用时间到现在的长短来判断；</p>\n</li>\n<li><p>LFU（Least frequently use）最少使用次数算法：根据使用次数来判断；</p>\n</li>\n<li><p>OPT（Optimal replacement）最优置换算法：理论的最优，理论；就是要保证置换出去的是不再被使用的页，或者是在实际内存中最晚使用的算法。</p>\n</li>\n</ul>\n<h1 id=\"11-颠簸\"><a href=\"#11-颠簸\" class=\"headerlink\" title=\"11.颠簸\"></a>11.颠簸</h1><p>​        颠簸本质上是指频繁的页调度行为，具体来讲，进程发生缺页中断，这时，必须置换某一页。然而，其他所有的页都在使用，它置换一个页，但又立刻再次需要这个页。因此，会不断产生缺页中断，导致整个系统的效率急剧下降，这种现象称为颠簸（抖动）。</p>\n<p>　　内存颠簸的解决策略包括：</p>\n<ul>\n<li><p>如果是因为页面替换策略失误，可以修改替换算法来解决这个问题；</p>\n</li>\n<li><p>如果是因为运行的程序太多，造成程序无法同时将所有频繁访问的页面调入内存，则要降低多道程序的数量；</p>\n</li>\n<li><p>否则，还剩下两个办法：终止该进程或增加物理内存容量</p>\n</li>\n</ul>\n<h1 id=\"12-分页和分段有什么区别（内存管理）\"><a href=\"#12-分页和分段有什么区别（内存管理）\" class=\"headerlink\" title=\"12.分页和分段有什么区别（内存管理）\"></a>12.分页和分段有什么区别（内存管理）</h1><p>​        段式存储管理是一种符合用户视角的内存分配管理方案。在段式存储管理中，将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）</p>\n<p>　　页式存储管理方案是一种用户视角内存与物理内存相分离的内存分配管理方案。在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的帧，程序加载时，可以将任意一页放入内存中任意一个帧，这些帧不必连续，从而实现了离散分离。页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）。</p>\n<p>​        段页式：程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。</p>\n<p><strong>两者的相同点：</strong></p>\n<p>分页机制和分段机制都是为了提高内存利用率，较少内存碎片。<br>页和段都是离散存储的，所以两者都是离散分配内存的方式。但是，每个页和段中 的内存是连续的。</p>\n<p><strong>两者的不同点：</strong></p>\n<ul>\n<li>目的不同：分页是由于系统管理的需要而不是用户的需要，它是信息的物理单位；分段的目的是为了能更好地满足用户的需要，它是信息的逻辑单位，它含有一组其意义相对完整的信息；</li>\n<li>大小不同：页的大小固定且由系统决定，而段的长度却不固定，由其所完成的功能决定；</li>\n<li>地址空间不同： 段向用户提供二维地址空间；页向用户提供的是一维地址空间；</li>\n<li>信息共享：段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制；</li>\n<li>内存碎片：页式存储管理的优点是没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）；而段式管理的优点是没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）。</li>\n<li>出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。</li>\n</ul>\n<h1 id=\"13-常用的IO模型\"><a href=\"#13-常用的IO模型\" class=\"headerlink\" title=\"13.常用的IO模型\"></a>13.常用的IO模型</h1><ul>\n<li>阻塞式I/O：应用进程被阻塞，直到数据从内核缓冲区复制到应用进程缓冲区中才返回。</li>\n<li>非阻塞式I/O：进程发起 IO 系统调用后，内核返回一个错误码而不会被阻塞；应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成。如果内核缓冲区有数据，内核就会把数据返回进程。</li>\n<li>I/O复用（select和poll)：使用 select 或者 poll 等待数据，可以等待多个套接字中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后把数据从内核复制到进程中。</li>\n<li>信号驱动式I/O（SIGIO)：当进程发起一个 IO 操作，会向内核注册一个信号处理函数，然后进程返回不阻塞；当内核数据就绪时会发送一个信号给进程，进程便在信号处理函数中调用 IO 读取数据。</li>\n<li>异步I/O（aio_系列函数）：当进程发起一个 IO 操作，进程返回不阻塞，但也不能返回结果；内核把整个 IO 处理完后，会通知进程结果。如果IO操作成功则进程直接获取到数据。</li>\n</ul>\n<h1 id=\"14-select\"><a href=\"#14-select\" class=\"headerlink\" title=\"14.select\"></a>14.select</h1><p>select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听少于 1024 个描述符。如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；而 poll 没有描述符数量的限制，poll 中的描述符是 pollfd 类型的数组；</p>\n<h1 id=\"15-fork函数的作用\"><a href=\"#15-fork函数的作用\" class=\"headerlink\" title=\"15.fork函数的作用\"></a>15.fork函数的作用</h1><p>在 Linux 中 fork 函数是非常重要的函数，它的作用是从已经存在的进程中创建一个子进程，而原进程称为父进程。</p>\n<p><strong>调用 fork(),当控制转移到内核中的 fork 代码后，内核开始做：</strong></p>\n<ol>\n<li>分配新的内存块和内核数据结构给子进程。</li>\n<li>将父进程部分数据结构内容拷贝至子进程。</li>\n<li>将子进程添加到系统进程列表。</li>\n<li>fork返回开始调度器，调度。</li>\n</ol>\n<p><strong>特点：</strong></p>\n<p>1)调用一次，返回两次并发执行</p>\n<p>2)相同但是独立的地址空间</p>\n<p>3)fork 的返回值：fock 函数调用一次却返回两次；向父进程返回子进程的 ID，向子进程中返回 0，</p>\n<p>4)fork 的子进程返回为 0；</p>\n<p>5)父进程返回的是子进程的 pid。</p>\n<p><strong>fork 调用失败的原因</strong></p>\n<p>1)系统中有太多进程。</p>\n<p>2)实际用户的进程数超过限制。</p>\n<h1 id=\"16-协程的概念\"><a href=\"#16-协程的概念\" class=\"headerlink\" title=\"16.协程的概念\"></a>16.协程的概念</h1><p><strong>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。</strong>协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p>\n<p>对操作系统而言，线程是最小的执行单元，进程是最小的资源管理单元。无论是进程还是线程，都是由操作系统所管理的。</p>\n<p><strong>协程不是被操作系统内核所管理的，而是完全由程序所控制，也就是在用户态执行</strong>。这样带来的好处是性能大幅度的提升，因为不会像线程切换那样消耗资源。</p>\n<p><strong>协程既不是进程也不是线程，协程仅仅是一个特殊的函数</strong>，协程它进程和进程不是一个维度的。</p>\n<p>一个进程可以包含多个线程，一个线程可以包含多个协程。</p>\n<p>一个线程内的多个协程虽然可以切换，但是<strong>多个协程是串行执行的，只能在一个线程内运行，没法利用 CPU 多核能力。</strong></p>\n<p>协程与进程一样，切换是存在上下文切换问题的。</p>\n<h1 id=\"17-linux-进程和线程？\"><a href=\"#17-linux-进程和线程？\" class=\"headerlink\" title=\"17.linux 进程和线程？\"></a>17.linux 进程和线程？</h1><p>进程通过 fork()创建</p>\n<p>线程通过 pthread_create() 函数创建</p>\n<h1 id=\"18-通过进程id查看占用的端口，通过端口号查看占用的进程-id\"><a href=\"#18-通过进程id查看占用的端口，通过端口号查看占用的进程-id\" class=\"headerlink\" title=\"18. 通过进程id查看占用的端口，通过端口号查看占用的进程 id\"></a>18. 通过进程id查看占用的端口，通过端口号查看占用的进程 id</h1><p>通过进程id查看占用的端口:<br>netstat -nap | grep 进程id<br>通过端口号查看占用的进程id :<br>netstat -nap | grep 端口号</p>\n<h1 id=\"19-僵尸进程产生的原因\"><a href=\"#19-僵尸进程产生的原因\" class=\"headerlink\" title=\"19.僵尸进程产生的原因\"></a>19.僵尸进程产生的原因</h1><p>**僵尸进程是指它的父进程没有等待(调用 wait/waitpid)**。如果子进程先结束而父进程后结束，即子进程结束后，父进程还在继续运行但是并未调用 wait/waitpid 那子进程就会成为僵尸进程。但如果子进程后结束，即父进程先结束了，但没有调用 wait/waitpid 来等待子进程的结束， 此时子进程还在运行，父进程已经结束。那么并不会产生僵尸进程。应为每个进程结束时， 系统都会扫描当前系统中运行的所有进程，看看有没有哪个进程时刚刚结束的这个进程的子 进程，如果有就有 init 来接管它，成为它的父进程。</p>\n<p><strong>进程设置僵尸状态的目的是维护子进程的信息，以便父进程在以后某个时间获取</strong>。要在当前 进程中生成一个子进程，一般需要调用 fork 这个系统调用，fork 这个函数的特别之处在于一次调用，两次返回，一次返回到父进程中，一次返回到子进程中，可以通过返回值来判断其 返回点。如果子进程先于父进程退出， 同时父进程又没有调用 wait/waitpid，则该子进程将成为僵尸进程。</p>\n<p>在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件，占用的内存。但是 仍然保留了一些信息（如进程号 pid 退出状态 运行时间等）。这些保留的信息直到进程通过调用 wait/waitpid 时才会释放。这样就导致了一个问题，如果没有调用 wait/waitpid 的话，那 么保留的信息就不会释放。比如进程号就会被一直占用了。但系统所能使用的进程号的有限 的，如果产生大量的僵尸进程，将导致系统没有可用的进程号而导致系统不能创建进程。所 以我们应该避免僵尸进程。</p>\n<p><strong>如果进程不调用 wait / waitpid 的话， 那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用 的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。</strong></p>\n<h1 id=\"20-孤儿进程产生的原因？\"><a href=\"#20-孤儿进程产生的原因？\" class=\"headerlink\" title=\"20.孤儿进程产生的原因？\"></a>20.孤儿进程产生的原因？</h1><p>孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤 儿进程。孤儿进程将被 init 进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。孤儿进程是没有父进程的进程，管理孤儿进程这个重任就落到了 init 进程身上，因此孤儿进程并 不会有什么危害。</p>\n<h1 id=\"21-讲一下用户态和内核态？所有的系统调用都会进入到内核态吗？\"><a href=\"#21-讲一下用户态和内核态？所有的系统调用都会进入到内核态吗？\" class=\"headerlink\" title=\"21.讲一下用户态和内核态？所有的系统调用都会进入到内核态吗？\"></a>21.讲一下用户态和内核态？所有的系统调用都会进入到内核态吗？</h1><p>操作系统（Operating System，简称 OS）是管理计算机硬件与软件资源的程序。根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别：</p>\n<ol>\n<li>用户态(user mode) : 用户态运行的进程或可以直接读取用户程序的数据。</li>\n<li>内核态(kernel mode):可以简单的理解系统态运行的进程或程序几乎可以访问计算机的任何资源，不受限制。<br>运行的程序基本都是运行在用户态。如果我们调用操作系统提供的内核态级别的子功能那就需要系统调用了。</li>\n</ol>\n<p>系统调用：<strong>与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都 必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。</strong></p>\n<p>系统调用是操作系统为应用程序提供能够访问到内核态的资源的接口。补充：</p>\n<p>用户态切换到内核态的几种方式</p>\n<p><strong>系统调用</strong>: 系统调用是用户态主动要求切换到内核态的一种方式， 用户应用程序通过操作系统调用内核为上层应用程序开放的接口来执行程序。</p>\n<p><strong>异常</strong>：当 cpu 在执行用户态的应用程序时，发生了某些不可知的异常。 于是当前用户态的应用进程切换到处理此异常的内核的程序中去。</p>\n<p><strong>硬件设备的中断</strong>: 当硬件设备完成用户请求后，会向 cpu 发出相应的中断信号，这时 cpu 会暂停执行下一条即将要执行的指令，转而去执行与中断信号对应的应用程序， 如果先前执行的指令是用户态下程序的指令，那么这个转换过程也是用户态到内核态的转换。</p>\n<h1 id=\"22-平常用什么-linux-命令比较多\"><a href=\"#22-平常用什么-linux-命令比较多\" class=\"headerlink\" title=\"22.平常用什么 linux 命令比较多\"></a>22.平常用什么 linux 命令比较多</h1><p>pwd:显示当前所在位置</p>\n<p>sudo + 其他命令：管理员身份运行</p>\n<p>grep:需要搜索的字符串，要搜索的文件 –color： 搜索命令 –color表示高亮显示</p>\n<p>ps -A：列出所有进程</p>\n<p>ps -ef | grep 进程关键字</p>\n<p>kill 进程pid：杀死进程</p>\n<p>find 目录 参数 ： 寻找目录（查）。在/home目录下查找以 .txt 结尾的文件名:find /home -name “*.txt” </p>\n<p>ls ：查看目录信息</p>\n<p>free：显示系统内存的使用情况</p>\n<h1 id=\"23-中断的分类\"><a href=\"#23-中断的分类\" class=\"headerlink\" title=\"23.中断的分类\"></a>23.中断的分类</h1><ul>\n<li><p>中断可以分为同步中断（synchronous）和异步中断(asynchronous)。</p>\n</li>\n<li><p>中断可分为硬中断和软中断。</p>\n</li>\n<li><p>中断可分为可屏蔽中断（Maskable interrupt）和非屏蔽中断（Nomaskable interrupt）。</p>\n</li>\n</ul>\n<p>同步中断是在指令执行时由 CPU 主动产生的，受到 CPU 控制，其执行点是可控的。异步中断是 CPU 被动接收到的，由外设发出的电信号引起，其发生时间不可预测。</p>\n<h1 id=\"24-软中断和硬中断\"><a href=\"#24-软中断和硬中断\" class=\"headerlink\" title=\"24.软中断和硬中断\"></a>24.软中断和硬中断</h1><p>从本质上讲，中断(硬)是一种电信号，当设备有某种事情发生的时候，他就会产生中断，通过 总线把电信号发送给中断控制器。如果中断的线是激活的，中断控制器就把电信号发送给处理器的某个特定引脚。处理器于是立即停止自己正在做的事，跳到中断处理程序的入口点， 进行中断处理。</p>\n<p>硬中断是由硬件产生的，比如，像磁盘，网卡，键盘，时钟等。每个设备或设备集都有它自己的 IRQ（中断请求）。</p>\n<p>软中断是由当前正在运行的进程所产生的。</p>\n<p>软中断比硬中断少了一个硬件发送信号的步骤。产生软中断的进程一定是当前正在运行的进 程，因此它们不会中断 CPU。但是它们会中断调用代码的流程。如果硬件需要 CPU 去做一些事情，那么这个硬件会使 CPU 中断当前正在运行的代码。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1]<a href=\"https://blog.csdn.net/justloveyou_/article/details/78304294\">https://blog.csdn.net/justloveyou_/article/details/78304294</a></p>\n<p>[2]<a href=\"http://www.cyc2018.xyz/\">http://www.cyc2018.xyz/</a></p>\n<p>[3]<a href=\"https://leetcode-cn.com/circle/discuss/XXGdoF\">https://leetcode-cn.com/circle/discuss/XXGdoF</a></p>\n","categories":["操作系统"]},{"title":"计算机网络","url":"/2021/03/23/computer-networks-interview/","content":"<h1 id=\"1-Http和Https的区别\"><a href=\"#1-Http和Https的区别\" class=\"headerlink\" title=\"1.Http和Https的区别\"></a>1.Http和Https的区别</h1><p>Http协议运行在TCP之上，明文传输，客户端与服务器端都无法验证对方的身份；Https是身披SSL(Secure Socket Layer)外壳的Http，运行于SSL上，SSL运行于TCP之上，是添加了加密和认证机制的HTTP。二者之间存在如下不同：</p>\n<ul>\n<li><p>端口不同：Http与Http使用不同的连接方式，用的端口也不一样，前者是80，后者是443；</p>\n</li>\n<li><p>资源消耗：和HTTP通信相比，Https通信会由于加减密处理消耗更多的CPU和内存资源；</p>\n</li>\n<li><p>开销：Https通信需要证书，而证书一般需要向认证机构购买；\n　</p>\n</li>\n</ul>\n<p>Https的加密机制是一种共享密钥加密和公开密钥加密并用的混合加密机制。</p>\n<h1 id=\"2-HTTP-是哪一层的协议？http常见的状态码\"><a href=\"#2-HTTP-是哪一层的协议？http常见的状态码\" class=\"headerlink\" title=\"2.HTTP 是哪一层的协议？http常见的状态码\"></a>2.HTTP 是哪一层的协议？http常见的状态码</h1><p>HTTP 协议 属于应用层的协议。</p>\n<p><strong>HTTP 协议是基于 TCP 协议的</strong>，发送 HTTP 请求之前首先要建立 TCP 连接也就是要经历 3 次握手。目前使用的 HTTP 协议大部分都是 1.1。在 1.1 的协议里面，默认是开启了 Keep-Alive 的，这样的话建立的连接就可以在多次请求中被复用了。</p>\n<p>另外， HTTP协议是无状态的协议，它<strong>无法记录客户端用户的状态</strong> 一般我们都是通过Session 来记录客户端用户的状态。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">状态码</th>\n<th align=\"center\">类别</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1XX</td>\n<td align=\"center\">Informational（信息性状态码）</td>\n<td align=\"center\">接收的请求正在处理</td>\n</tr>\n<tr>\n<td align=\"center\">2XX</td>\n<td align=\"center\">Success（成功状态码）</td>\n<td align=\"center\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td align=\"center\">3XX</td>\n<td align=\"center\">Redirection（重定向状态码）</td>\n<td align=\"center\">需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td align=\"center\">4XX</td>\n<td align=\"center\">Client Error（客户端错误状态码）</td>\n<td align=\"center\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td align=\"center\">5XX</td>\n<td align=\"center\">Server Error（服务器错误状态码）</td>\n<td align=\"center\">服务器处理请求出错</td>\n</tr>\n</tbody></table>\n<h2 id=\"1XX-信息\"><a href=\"#1XX-信息\" class=\"headerlink\" title=\"1XX 信息\"></a>1XX 信息</h2><ul>\n<li><u><strong>100 Continue</strong></u> ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li>\n</ul>\n<h2 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h2><ul>\n<li><u><strong>200 OK</strong></u></li>\n<li><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</li>\n<li><strong>206 Partial Content</strong> ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</li>\n</ul>\n<h2 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h2><ul>\n<li><u><strong>301 Moved Permanently</strong></u> ：永久性重定向</li>\n<li><u><strong>302 Found</strong></u> ：临时性重定向</li>\n<li><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</li>\n<li>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</li>\n<li><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</li>\n<li><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</li>\n</ul>\n<h2 id=\"4XX-客户端错误\"><a href=\"#4XX-客户端错误\" class=\"headerlink\" title=\"4XX 客户端错误\"></a>4XX 客户端错误</h2><ul>\n<li><strong>400 Bad Request</strong> ：请求报文中存在语法错误。</li>\n<li><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</li>\n<li><u><strong>403 Forbidden</strong></u> ：请求被拒绝。(可能没有权限)</li>\n<li><u><strong>404 Not Found</strong></u> :  没有对应资源</li>\n</ul>\n<h2 id=\"5XX-服务器错误\"><a href=\"#5XX-服务器错误\" class=\"headerlink\" title=\"5XX 服务器错误\"></a>5XX 服务器错误</h2><ul>\n<li><u><strong>500 Internal Server Error</strong></u>  ：服务器正在执行请求时发生错误。（有内部错误）</li>\n<li><u><strong>503 Service Unavailable</strong></u> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li>\n</ul>\n<h1 id=\"3-对称式加密与非对称式加密\"><a href=\"#3-对称式加密与非对称式加密\" class=\"headerlink\" title=\"3.对称式加密与非对称式加密\"></a>3.对称式加密与非对称式加密</h1><p>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称 加密算法有DES、AES等；</p>\n<p>非对称密钥加密，加密和解密使用不同的密钥。通信发送方获得接收方的公开密钥之后，就 可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。可以更安全地将公 开密钥传输给通信发送方；运算速度慢。典型的非对称加密算法有RSA、DSA等</p>\n<p>HTTPS 采用的加密方式: HTTPS 采用混合的加密机制。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。</p>\n<h1 id=\"4-HTTP-2-0\"><a href=\"#4-HTTP-2-0\" class=\"headerlink\" title=\"4.HTTP/2.0\"></a>4.HTTP/2.0</h1><h2 id=\"HTTP-1-x-缺陷\"><a href=\"#HTTP-1-x-缺陷\" class=\"headerlink\" title=\"HTTP/1.x 缺陷\"></a>HTTP/1.x 缺陷</h2><p>HTTP/1.x 实现简单是以牺牲性能为代价的：</p>\n<ul>\n<li>客户端需要使用多个连接才能实现并发和缩短延迟；</li>\n<li>不会压缩请求和响应首部，从而导致不必要的网络流量；</li>\n<li>不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。</li>\n</ul>\n<h2 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP/2.0\"></a>HTTP/2.0</h2><h3 id=\"二进制分帧层\"><a href=\"#二进制分帧层\" class=\"headerlink\" title=\"二进制分帧层\"></a>二进制分帧层</h3><ul>\n<li><p>HTTP/2.0 将报文分成 HEADERS 帧和 DATA 帧，它们都是二进制格式的。</p>\n</li>\n<li><p>在通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流（Stream）。</p>\n</li>\n</ul>\n<h3 id=\"服务端推送\"><a href=\"#服务端推送\" class=\"headerlink\" title=\"服务端推送\"></a>服务端推送</h3><p>HTTP/2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。</p>\n<h3 id=\"首部压缩\"><a href=\"#首部压缩\" class=\"headerlink\" title=\"首部压缩\"></a>首部压缩</h3><p>HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。</p>\n<p>HTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。</p>\n<p>不仅如此，HTTP/2.0 也使用 Huffman 编码对首部字段进行压缩。</p>\n<h1 id=\"5-HTTP报文详解\"><a href=\"#5-HTTP报文详解\" class=\"headerlink\" title=\"5.HTTP报文详解\"></a>5.HTTP报文详解</h1><h2 id=\"请求和响应报文\"><a href=\"#请求和响应报文\" class=\"headerlink\" title=\"请求和响应报文\"></a>请求和响应报文</h2><p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。</p>\n<p>请求报文结构：</p>\n<ul>\n<li>第一行是包含了请求方法、URL、协议版本；</li>\n<li>接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。</li>\n<li>一个空行用来分隔首部和内容主体 Body</li>\n<li>最后是请求的内容主体</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET http://www.example.com/ HTTP/1.1</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class=\"line\">Cache-Control: max-age=0</span><br><span class=\"line\">Host: www.example.com</span><br><span class=\"line\">If-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT</span><br><span class=\"line\">If-None-Match: &quot;3147526947+gzip&quot;</span><br><span class=\"line\">Proxy-Connection: keep-alive</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">User-Agent: Mozilla/5.0 xxx</span><br><span class=\"line\"></span><br><span class=\"line\">param1=1&amp;param2=2</span><br></pre></td></tr></table></figure>\n\n<p>响应报文结构：</p>\n<ul>\n<li>第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了</li>\n<li>接下来多行也是首部内容</li>\n<li>一个空行分隔首部和内容主体</li>\n<li>最后是响应的内容主体</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Age: 529651</span><br><span class=\"line\">Cache-Control: max-age=604800</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Length: 648</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br><span class=\"line\">Date: Mon, 02 Nov 2020 17:53:39 GMT</span><br><span class=\"line\">Etag: &quot;3147526947+ident+gzip&quot;</span><br><span class=\"line\">Expires: Mon, 09 Nov 2020 17:53:39 GMT</span><br><span class=\"line\">Keep-Alive: timeout=4</span><br><span class=\"line\">Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT</span><br><span class=\"line\">Proxy-Connection: keep-alive</span><br><span class=\"line\">Server: ECS (sjc/16DF)</span><br><span class=\"line\">Vary: Accept-Encoding</span><br><span class=\"line\">X-Cache: HIT</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Example Domain&lt;/title&gt;</span><br><span class=\"line\">\t// 省略... </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-HTTP-1-1-新特点\"><a href=\"#6-HTTP-1-1-新特点\" class=\"headerlink\" title=\"6.HTTP/1.1 新特点\"></a>6.HTTP/1.1 新特点</h1><ul>\n<li>默认是长连接</li>\n<li>支持流水线</li>\n<li>支持同时打开多个 TCP 连接</li>\n<li>支持虚拟主机</li>\n<li>新增状态码 100</li>\n<li>支持分块传输编码</li>\n<li>新增缓存处理指令 max-age</li>\n</ul>\n<h1 id=\"7-GET和POST的区别\"><a href=\"#7-GET和POST的区别\" class=\"headerlink\" title=\"7.GET和POST的区别\"></a>7.GET和POST的区别</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>GET 用于获取资源，而 POST 用于传输实体主体。</p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>GET请求的数据会附在URL之后，即将请求数据放置在HTTP报文的 <strong>请求头</strong> 中。而POST请求会把提交的数据则放置在是HTTP请求报文的 **请求体 **中。</p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><p>安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。</p>\n<p>GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</p>\n<p>安全的方法除了 GET 之外还有：HEAD、OPTIONS。</p>\n<p>不安全的方法除了 POST 之外还有 PUT、DELETE。</p>\n<h2 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h2><p>幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。</p>\n<p>所有的安全方法也都是幂等的。</p>\n<p>在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。</p>\n<h2 id=\"请求的大小\"><a href=\"#请求的大小\" class=\"headerlink\" title=\"请求的大小\"></a>请求的大小</h2><p>GET请求的长度受限于浏览器或服务器对URL长度的限制，允许发送的数据量比较小，而POST请求则是没有大小限制的。</p>\n<h1 id=\"8-TCP-IP-4-层模型了解么\"><a href=\"#8-TCP-IP-4-层模型了解么\" class=\"headerlink\" title=\"8.TCP/IP 4 层模型了解么\"></a>8.TCP/IP 4 层模型了解么</h1><p>TCP/IP 4 层模型:</p>\n<ol>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>网络接口层</li>\n</ol>\n<h1 id=\"9-OSI网络体系结构与TCP-IP协议模型\"><a href=\"#9-OSI网络体系结构与TCP-IP协议模型\" class=\"headerlink\" title=\"9.OSI网络体系结构与TCP/IP协议模型\"></a>9.OSI网络体系结构与TCP/IP协议模型</h1><p>​    我们知道TCP/IP与OSI最大的不同在于：OSI是一个理论上的网络通信模型，而TCP/IP则是实际上的网络通信标准。但是，它们的初衷是一样的，都是为了使得两台计算机能够像两个知心朋友那样能够互相准确理解对方的意思并做出优雅的回应。现在，我们对OSI七层模型的各层进行简要的介绍：</p>\n<p>　　　　　　　　　<img src=\"http://static.zybuluo.com/Rico123/0qwq331jj8bzgmqst282f6lp/OSI%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8ETCPIP%E5%8D%8F%E8%AE%AE%E6%A8%A1%E5%9E%8B.png\" alt=\"OSI网络体系结构与TCPIP协议模型.png-51.3kB\">　</p>\n<p>1). 物理层</p>\n<p>　　参考模型的最低层，也是OSI模型的第一层，实现了相邻计算机节点之间比特流的透明传送，并尽可能地屏蔽掉具体传输介质和物理设备的差异，使其上层(数据链路层)不必关心网络的具体传输介质。</p>\n<p>2). 数据链路层（data link layer）</p>\n<p>　　接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层。这一层在物理层提供的比特流的基础上，通过差错控制、流量控制方法，使有差错的物理线路变为无差错的数据链路，即提供可靠的通过物理介质传输数据的方法。</p>\n<p>3). 网络层</p>\n<p>　　将网络地址翻译成对应的物理地址，并通过路由选择算法为分组通过通信子网选择最适当的路径。</p>\n<p>　　　　　　<img src=\"http://static.zybuluo.com/Rico123/ed9145bf4nus32fr7umxxnk7/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E4%B8%8E%E7%BD%91%E8%B7%AF%E5%B1%82.png\" alt=\"数据链路层与网路层.png-58.4kB\">　　　　</p>\n<p>4). 传输层（transport layer）</p>\n<p>　　在源端与目的端之间提供可靠的透明数据传输，使上层服务用户不必关系通信子网的实现细节。在协议栈中，传输层位于网络层之上，传输层协议为不同主机上运行的进程提供逻辑通信，而网络层协议为不同主机提供逻辑通信，如下图所示。</p>\n<p>　　　　　<img src=\"http://static.zybuluo.com/Rico123/5td1y45fm09cbhgw07o6fgfc/%E7%BD%91%E8%B7%AF%E5%B1%82%E4%B8%8E%E4%BC%A0%E8%BE%93%E5%B1%82.png\" alt=\"网路层与传输层.png-52.8kB\">　　　　　</p>\n<p>　　实际上，网络层可以看作是传输层的一部分，其为传输层提供服务。但对于终端系统而言，网络层对它们而言是透明的，它们知道传输层的存在，也就是说，在逻辑上它们认为是传输层为它们提供了端对端的通信，这也是分层思想的妙处。</p>\n<p>5). 会话层（Session Layer）</p>\n<p>　　会话层是OSI模型的第五层，是用户应用程序和网络之间的接口，负责在网络中的两节点之间建立、维持和终止通信。</p>\n<p>6). 表示层（Presentation Layer）：数据的编码，压缩和解压缩，数据的加密和解密</p>\n<p>　　表示层是OSI模型的第六层，它对来自应用层的命令和数据进行解释，以确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</p>\n<p>7). 应用层（Application layer）：为用户的应用进程提供网络通信服务</p>\n<h1 id=\"10-三次握手\"><a href=\"#10-三次握手\" class=\"headerlink\" title=\"10.三次握手\"></a>10.三次握手</h1><p><img src=\"/images/pasted-210323threehandshake.jpg\"></p>\n<p><img src=\"/images/pasted-210323fourhandshake.jpg\"></p>\n<p><img src=\"/images/pasted-210323statechange.jpg\"></p>\n<h2 id=\"文字说明\"><a href=\"#文字说明\" class=\"headerlink\" title=\"文字说明\"></a>文字说明</h2><p>三次握手(我要和你建立链接，你真的要和我建立链接么，我真的要和你建立链接，成功)：</p>\n<ul>\n<li><p>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</p>\n</li>\n<li><p>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</p>\n</li>\n<li><p>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p>\n</li>\n</ul>\n<p><img src=\"http://static.zybuluo.com/Rico123/c7m5fo6qdua0q7me88jm9w10/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"三次握手.png-12.4kB\"></p>\n<h2 id=\"三次握手的原因\"><a href=\"#三次握手的原因\" class=\"headerlink\" title=\"三次握手的原因\"></a>三次握手的原因</h2><p>三次握手的目的是建立可靠的通信信道，三次握手最主要的目的就是双方确认自己与对方的 发送与接收是正常的。</p>\n<p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p>\n<h2 id=\"为什么两次不行\"><a href=\"#为什么两次不行\" class=\"headerlink\" title=\"为什么两次不行\"></a>为什么两次不行</h2><p>​        为了防止 已失效的链接请求报文突然又传送到了服务端，因而产生错误。</p>\n<p>　　客户端发出的连接请求报文并未丢失，而是在某个网络节点长时间滞留了，以致延误到链接释放以后的某个时间才到达Server。这是，Server误以为这是Client发出的一个新的链接请求，于是就向客户端发送确认数据包，同意建立链接。若不采用“三次握手”，那么只要Server发出确认数据包，新的链接就建立了。由于client此时并未发出建立链接的请求，所以其不会理睬Server的确认，也不与Server通信；而这时Server一直在等待Client的请求，这样Server就白白浪费了一定的资源。若采用“三次握手”，在这种情况下，由于Server端没有收到来自客户端的确认，则就会知道Client并没有要求建立请求，就不会建立链接。</p>\n<h1 id=\"11-四次挥手\"><a href=\"#11-四次挥手\" class=\"headerlink\" title=\"11.四次挥手\"></a>11.四次挥手</h1><p><img src=\"/images/pasted-210323groupchange.jpg\"></p>\n<h2 id=\"文字说明-1\"><a href=\"#文字说明-1\" class=\"headerlink\" title=\"文字说明\"></a>文字说明</h2><ul>\n<li><p>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</p>\n</li>\n<li><p>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。此时TCP链接处于半关闭状态，即客户端已经没有要发送的数据了，但服务端若发送数据，则客户端仍要接收。</p>\n</li>\n<li><p>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</p>\n</li>\n<li><p>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。<br><img src=\"http://static.zybuluo.com/Rico123/ardiuu1otopo9f1jd4df18iz/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"四次挥手.png-12.6kB\"></p>\n</li>\n</ul>\n<h2 id=\"CLOSE-WAIT-状态问题：\"><a href=\"#CLOSE-WAIT-状态问题：\" class=\"headerlink\" title=\"CLOSE-WAIT 状态问题：\"></a>CLOSE-WAIT 状态问题：</h2><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送FIN 连接释放报文。</p>\n<h2 id=\"TIME-WAIT-状态问题-这个问题问过很多次但总是答得不甚满意-：\"><a href=\"#TIME-WAIT-状态问题-这个问题问过很多次但总是答得不甚满意-：\" class=\"headerlink\" title=\"TIME-WAIT 状态问题(这个问题问过很多次但总是答得不甚满意)：\"></a>TIME-WAIT 状态问题(这个问题问过很多次但总是答得不甚满意)：</h2><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p>\n<p>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</p>\n<p>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一 个新的连接不会出现旧的连接请求报文。</p>\n<p>通信双方建立TCP连接后，主动关闭连接的一方就会进入TIME_WAIT状态。</p>\n<h1 id=\"12-TCP滑动窗口是干什么的\"><a href=\"#12-TCP滑动窗口是干什么的\" class=\"headerlink\" title=\"12.TCP滑动窗口是干什么的\"></a>12.TCP滑动窗口是干什么的</h1><p>滑动窗口：窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接 收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p>\n<p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。接收窗口只会对窗口内 最后一个按序到达的字节进行确认。如果发送窗口内的字节已经发送并且收到了确认，那么 就将发送窗口向右滑动一定距离，直到第一个字节不是已发送并且已确认的状态；接收窗口 的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向滑动接收窗口。</p>\n<h1 id=\"13-TCP的可靠性体现在哪里\"><a href=\"#13-TCP的可靠性体现在哪里\" class=\"headerlink\" title=\"13.TCP的可靠性体现在哪里\"></a>13.TCP的可靠性体现在哪里</h1><p>对于可靠性，TCP通过以下方式进行保证：</p>\n<ul>\n<li><p>数据包校验（校验和）：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时TCP发送数据端超时后会重发数据；</p>\n</li>\n<li><p>对失序数据包重排序：既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。TCP将对失序数据进行重新排序，然后才交给应用层；</p>\n</li>\n<li><p>丢弃重复数据：对于重复数据，能够丢弃重复数据；</p>\n</li>\n<li><p>应答机制：当TCP收到发自TCP连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；</p>\n</li>\n<li><p>超时重发：当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；</p>\n</li>\n<li><p>流量控制：TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP使用的流量控制协议是可变大小的滑动窗口协议。</p>\n</li>\n<li><p>拥塞控制：当网络拥塞时，减少数据的发送。</p>\n</li>\n</ul>\n<h1 id=\"14-TCP流量控制\"><a href=\"#14-TCP流量控制\" class=\"headerlink\" title=\"14.TCP流量控制\"></a>14.TCP流量控制</h1><p><strong>流量控制如何实现</strong>：流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p>\n<p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送 速率。将窗口字段设置为 0，则发送方不能发送数据。</p>\n<h1 id=\"15-拥塞控制如何实现\"><a href=\"#15-拥塞控制如何实现\" class=\"headerlink\" title=\"15.拥塞控制如何实现\"></a>15.拥塞控制如何实现</h1><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞 程度更高。因此当出现拥塞时，应当控制发送方的速率。TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p>\n<p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量。</p>\n<p>1）<strong>慢启动：</strong>不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小;</p>\n<p>2） <strong>拥塞避免：</strong>拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍，这样拥塞窗口按线性规律缓慢增长。如果出现了超时，则令慢开始门限 = 拥塞窗口大小 / 2，然后重新执行慢开始。</p>\n<p><img src=\"http://static.zybuluo.com/Rico123/whi0y5sbc3tx9qcdp0s532gw/%E6%85%A2%E5%BC%80%E5%A7%8B%E4%B8%8E%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D.png\" alt=\"慢开始与拥塞避免.png-90.3kB\"></p>\n<p>3）<strong>快重传：</strong>快重传要求接收方在收到一个 <strong>失序的报文段</strong> 后就立即发出 <strong>重复确认</strong>（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</p>\n<p><img src=\"http://static.zybuluo.com/Rico123/wuktdms9jtg4s9m4pe5kcbiq/%E5%BF%AB%E9%87%8D%E4%BC%A0.jpg\" alt=\"快重传.jpg-42.3kB\"></p>\n<p>4）<strong>快恢复</strong>：快重传配合使用的还有快恢复算法，当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半，但是接下去并不执行慢开始算法：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。</p>\n<h1 id=\"16-TCP和UDP有什么区别？及其适用的场景\"><a href=\"#16-TCP和UDP有什么区别？及其适用的场景\" class=\"headerlink\" title=\"16.TCP和UDP有什么区别？及其适用的场景\"></a>16.TCP和UDP有什么区别？及其适用的场景</h1><p>TCP (Transmission Control Protocol)和UDP(User Datagram Protocol)协议属于传输层协议，它们之间的区别包括：</p>\n<ul>\n<li><p>TCP是面向连接的，UDP是无连接的；</p>\n</li>\n<li><p>TCP是可靠的，UDP是不可靠的；</p>\n</li>\n<li><p>TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多的通信模式；</p>\n</li>\n<li><p>TCP是面向字节流的，UDP是面向报文的；</p>\n</li>\n<li><p>TCP有拥塞控制机制;UDP没有拥塞控制，适合媒体通信；</p>\n</li>\n<li><p>TCP首部开销(20个字节)比UDP的首部开销(8个字节)要大；</p>\n</li>\n</ul>\n<p><strong>TCP应用场景</strong>：</p>\n<p>效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、 排序等操作，相比之下效率没有UDP高。举几个例子：文件传输、接受邮件、远程登录。</p>\n<p><strong>UDP应用场景</strong>：</p>\n<p>效率要求相对高，对准确性要求相对低的场景。举几个例子：QQ聊天、在线视频、网络语音电话、广播通信（广播、多播）。</p>\n<p>1). TCP对应的应用层协议</p>\n<ul>\n<li><p>FTP：定义了文件传输协议，使用21端口。常说某某计算机开了FTP服务便是启动了文件传输服务。下载文件，上传主页，都要用到FTP服务。</p>\n</li>\n<li><p>Telnet：它是一种用于远程登陆的端口，用户可以以自己的身份远程连接到计算机上，通过这种端口可以提供一种基于DOS模式下的通信服务。如以前的BBS是-纯字符界面的，支持BBS的服务器将23端口打开，对外提供服务。</p>\n</li>\n<li><p>SMTP：定义了简单邮件传送协议，现在很多邮件服务器都用的是这个协议，用于发送邮件。如常见的免费邮件服务中用的就是这个邮件服务端口，所以在电子邮件设置-中常看到有这么SMTP端口设置这个栏，服务器开放的是25号端口。</p>\n</li>\n<li><p>POP3：它是和SMTP对应，POP3用于接收邮件。通常情况下，POP3协议所用的是110端口。也是说，只要你有相应的使用POP3协议的程序（例如Fo-xmail或Outlook），就可以不以Web方式登陆进邮箱界面，直接用邮件程序就可以收到邮件（如是163邮箱就没有必要先进入网易网站，再进入自己的邮-箱来收信）。</p>\n</li>\n<li><p>HTTP：从Web服务器传输超文本到本地浏览器的传送协议。</p>\n</li>\n</ul>\n<p>2). UDP对应的应用层协议</p>\n<ul>\n<li><p>DNS：用于域名解析服务，将域名地址转换为IP地址。DNS用的是53号端口。</p>\n</li>\n<li><p>SNMP：简单网络管理协议，使用161号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。</p>\n</li>\n<li><p>TFTP(Trival File Transfer Protocal)：简单文件传输协议，该协议在熟知端口69上使用UDP服务。</p>\n</li>\n</ul>\n<p><img src=\"http://static.zybuluo.com/Rico123/r3gm4e6y9hlgqllw8ba10676/TCP%E5%92%8CUDP%E5%88%86%E5%88%AB%E5%AF%B9%E5%BA%94%E7%9A%84%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE.png\" alt=\"TCP和UDP分别对应的常见应用层协议.png-41.5kB\"></p>\n<h1 id=\"17-UDP为何快\"><a href=\"#17-UDP为何快\" class=\"headerlink\" title=\"17.UDP为何快\"></a>17.UDP为何快</h1><p><strong>UDP为何快？</strong></p>\n<ol>\n<li>不需要建立连接</li>\n<li>对于收到的数据，不用给出确认</li>\n<li>没有超时重发机制</li>\n<li>没有流量控制和拥塞控制</li>\n</ol>\n<h1 id=\"18-Mac-地址和-ip-地址的区别？既然有了-Mac-地址，为什么还要-ip-地址呢？\"><a href=\"#18-Mac-地址和-ip-地址的区别？既然有了-Mac-地址，为什么还要-ip-地址呢？\" class=\"headerlink\" title=\"18.Mac 地址和 ip 地址的区别？既然有了 Mac 地址，为什么还要 ip 地址呢？\"></a>18.Mac 地址和 ip 地址的区别？既然有了 Mac 地址，为什么还要 ip 地址呢？</h1><p>MAC地址是烧录在网卡或者接口上的<strong>物理地址</strong>，具有<strong>全球唯一性</strong>，一般不能被改变。IP地址是网络中的主机或接口在网络中的<strong>逻辑地址</strong>，在<strong>同一个网络内具有唯一性</strong>。</p>\n<h1 id=\"19-当你打开一个电商网站，都需要经历哪些过程？分别用到了什么协议。\"><a href=\"#19-当你打开一个电商网站，都需要经历哪些过程？分别用到了什么协议。\" class=\"headerlink\" title=\"19.当你打开一个电商网站，都需要经历哪些过程？分别用到了什么协议。\"></a>19.当你打开一个电商网站，都需要经历哪些过程？分别用到了什么协议。</h1><ol>\n<li>浏览器查找域名的IP地址 （DNS：获取域名对应的IP）</li>\n<li> 浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；</li>\n<li>TCP/IP链接建立起来后，浏览器向web服务器发送HTTP请求（cookies会随着请求发送给服务器）</li>\n<li>服务器处理请求 （请求 处理请求 参数、cookies、生成一个HTML响应）</li>\n<li>服务器返回HTTP报文，发回一个HTML响应。</li>\n<li>浏览器解析渲染页面，浏览器开始显示HTML。</li>\n<li>连接结束</li>\n</ol>\n<p>使用的协议:</p>\n<p><strong>DNS</strong>: 获取域名对应的IP TCP: 与服务器建立TCP连接</p>\n<p><strong>IP</strong>: 建立TCP协议时，需要发送数据，发送数据在网络层上使用IP协议</p>\n<p><strong>OSPF</strong>：IP数据包在路由器之间，路由选择使用OSPF协议</p>\n<p><strong>ARP</strong>：路由器在与服务器进行通信的过程中，将IP地址装换成MAC地址</p>\n<p><strong>HTTP</strong>：客户端浏览器与Web服务器之间的应用层通信协议，在TCP建立完成后，使用HTTP协议访问网页</p>\n<h1 id=\"20-网络层的ARP协议工作原理\"><a href=\"#20-网络层的ARP协议工作原理\" class=\"headerlink\" title=\"20.网络层的ARP协议工作原理\"></a>20.<strong>网络层的ARP协议工作原理</strong></h1><p>​    <strong>网络层的ARP协议完成了IP地址与物理地址的映射</strong>。首先，每台主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址的对应关系。当源主机需要将一个数据包要发送到目的主机时，会首先检查自己ARP列表中是否存在该IP地址对应的MAC地址：如果有，就直接将数据包发送到这个MAC地址；如果没有，就向本地网段发起一个ARP请求的广播包，查询此目的主机对应的MAC地址。此ARP请求数据包里包括源主机的IP地址、硬件地址、以及目的主机的IP地址。网络中所有的主机收到这个ARP请求后，会检查数据包中的目的IP是否和自己的IP地址一致。如果不相同就忽略此数据包；如果相同，该主机首先将发送端的MAC地址和IP地址添加到自己的ARP列表中，如果ARP表中已经存在该IP的信息，则将其覆盖，然后给源主机发送一个ARP响应数据包，告诉对方自己是它需要查找的MAC地址；源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p>\n<h1 id=\"21-电子邮件的发送过程\"><a href=\"#21-电子邮件的发送过程\" class=\"headerlink\" title=\"21.电子邮件的发送过程?\"></a>21.电子邮件的发送过程?</h1><p>一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。</p>\n<p>邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。</p>\n<ol>\n<li>用户A的邮箱是QQ邮箱，他要发往的邮箱是163邮箱，用户A写好一封邮件点击发送， 即提交到了QQ邮箱服务器，使用的是SMTP协议。</li>\n<li>QQ邮箱会对A发送邮件的收件地址进行解析，判断是否为内部邮箱的账号，如果也是QQ邮箱，会直接存储到自己的存储空间，如果不是则会发送到指定邮箱服务器，使用 的也是SMTP协议。</li>\n<li>163的邮箱服务器收到邮件后会再次判断该邮件是否为自己的邮件，如果是则存到自己的存储空间，等待POP3服务去读取邮件。</li>\n<li>用户B收到消息后，打开客户端访问163服务器，调用POP3服务。</li>\n<li>Pop3服务接到指令后，读取存储空间中发送给B的未读邮件服务。</li>\n<li>将读取到的邮件返回给客户端软件。</li>\n</ol>\n<h1 id=\"22-DNS解析过程，DNS劫持了解吗？\"><a href=\"#22-DNS解析过程，DNS劫持了解吗？\" class=\"headerlink\" title=\"22.DNS解析过程，DNS劫持了解吗？\"></a>22.DNS解析过程，DNS劫持了解吗？</h1><p>DNS完成的工作是：域名到IP地址的解析。将域名和IP地址相互映射的一个分布式数据库。</p>\n<ul>\n<li><p>第一步：客户机提出域名解析请求，并将该请求发送给本地域名服务器。</p>\n</li>\n<li><p>第二步：当本地域名服务器收到请求后，就先查询本地缓存，如果有该纪录项，则本地域名服务器就直接把查询结果返回。</p>\n</li>\n<li><p>第三步：如果本地缓存中没该纪录，则本地域名服务器就直接把请求发给根域名服务器，然 后根域名服务器再返回给本地域名服务器一个所查询域(根子域)主域名服务器地址。</p>\n</li>\n<li><p>第四步：本地服务器再向上一步返回的域名服务器发送请求，然后接受请求的服务器查询自 己的缓存，如果没该纪录，则返回相关下级域名服务器地址。</p>\n</li>\n<li><p>第五步：重复第四步，直到找到正确纪录。</p>\n</li>\n<li><p>第六步：本地域名服务器把返回结果保存到缓存，以备下一次使用，同时还将结果返回给客 户机。</p>\n</li>\n</ul>\n<p>DNS劫持：在DNS服务器中，将www..com的域名对应的IP地址进行了变化。你解析出来的 域名对应的IP，在劫持前后不一样。</p>\n<p>HTTP劫持：你DNS解析的域名的IP地址不变。在和网站交互过程中的劫持了你的请求。在网站发给你信息前就给你返回了请求。</p>\n<p>DNS在区域传输的时候使用TCP协议,其他时候使用UDP协议。</p>\n<h1 id=\"23-session和cookie的问题？\"><a href=\"#23-session和cookie的问题？\" class=\"headerlink\" title=\"23.session和cookie的问题？\"></a>23.session和cookie的问题？</h1><p>Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式</p>\n<p>Cookie 一般用来保存用户信息，Session 的主要作用就是通过服务端记录用户的状态</p>\n<p>Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。相对来说 Session 安全性更高。如果要在 Cookie 中存储一些敏感信息，不要直接写入 Cookie 中，最好能将Cookie 信息加密然后使用到的时候再去服务器端解密。</p>\n<h1 id=\"24-HTTP是不保存状态的协议-如何保存用户状态\"><a href=\"#24-HTTP是不保存状态的协议-如何保存用户状态\" class=\"headerlink\" title=\"24.HTTP是不保存状态的协议,如何保存用户状态?\"></a>24.HTTP是不保存状态的协议,如何保存用户状态?</h1><p>HTTP 是一种无状态协议。HTTP 协议自身不对请求和响应之间的通信状态进行保存。主要通过session机制来进行解决，Session 的主要作用就是通过服务端记录用户的状态。</p>\n<p>在服务端保存 Session 的方法很多，最常用的就是内存和数据库(比如是使用内存数据库redis 保存)。既然 Session 存放在服务器端，那么我们如何实现 Session 跟踪呢？大部分情况下， 我们都是通过在 Cookie 中附加一个 Session ID 来方式来跟踪。</p>\n<p>ps:<strong>Cookie</strong> 被禁用怎么办： 最常用的就是利用 URL 把 Session ID 直接附加在URL路径的后面。</p>\n<h1 id=\"25-Session-与-Cookie-的对比\"><a href=\"#25-Session-与-Cookie-的对比\" class=\"headerlink\" title=\"25.Session 与 Cookie 的对比\"></a>25.Session 与 Cookie 的对比</h1><ul>\n<li><p>实现机制：Session的实现常常依赖于Cookie机制，通过Cookie机制回传SessionID；</p>\n</li>\n<li><p>大小限制：Cookie有大小限制并且浏览器对每个站点也有cookie的个数限制，Session没有大小限制，理论上只与服务器的内存大小有关；</p>\n</li>\n<li><p>安全性：Cookie存在安全隐患，通过拦截或本地文件找得到cookie后可以进行攻击，而Session由于保存在服务器端，相对更加安全；</p>\n</li>\n<li><p>服务器资源消耗：Session是保存在服务器端上会存在一段时间才会消失，如果session过多会增加服务器的压力。</p>\n</li>\n</ul>\n<h1 id=\"26-IP地址的划分\"><a href=\"#26-IP地址的划分\" class=\"headerlink\" title=\"26.IP地址的划分\"></a>26.IP地址的划分</h1><p>IP 地址的编址方式经历了三个历史阶段：</p>\n<ul>\n<li>分类</li>\n<li>子网划分</li>\n<li>无分类</li>\n</ul>\n<h2 id=\"1-分类\"><a href=\"#1-分类\" class=\"headerlink\" title=\"1. 分类\"></a>1. 分类</h2><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p>\n<p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 主机号 &gt;}</p>\n<p><img src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cbf50eb8-22b4-4528-a2e7-d187143d57f7.png\" alt=\"img\"></p>\n<ul>\n<li>A类地址：以0开头，第一个字节范围：0~127；（地址范围1.0.0.0到127.255.255.255）</li>\n<li>B类地址：以10开头，第一个字节范围：128~191；（地址范围128.0.0.0-191.255.255.255）</li>\n<li>C类地址：以110开头，第一个字节范围：192~223；（地址范围192.0.0.0-223.255.255.255）</li>\n<li>D类地址：以1110开头，第一个字节范围为224~239；（地址范围224.0.0.0到239.255.255.255。）</li>\n<li>E类地址：以1111开头，保留地址</li>\n</ul>\n<h2 id=\"2-子网划分\"><a href=\"#2-子网划分\" class=\"headerlink\" title=\"2. 子网划分\"></a>2. 子网划分</h2><p>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。</p>\n<p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}</p>\n<p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p>\n<p>注意，外部网络看不到子网的存在。</p>\n<h2 id=\"3-无分类\"><a href=\"#3-无分类\" class=\"headerlink\" title=\"3. 无分类\"></a>3. 无分类</h2><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p>\n<p>IP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p>\n<p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p>\n<p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p>\n<p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 <strong>构成超网</strong> 。</p>\n<p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p>\n<h1 id=\"27-DDos攻击了解吗？\"><a href=\"#27-DDos攻击了解吗？\" class=\"headerlink\" title=\"27.DDos攻击了解吗？\"></a>27.DDos攻击了解吗？</h1><p>分布式拒绝服务，一般来说是指攻击者利用一些被控制的设备对目标网站在较短的时间内发 起大量请求，大规模消耗目标网站的主机资源，让它无法正常服务。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1]<a href=\"https://leetcode-cn.com/circle/discuss/XXGdoF\">https://leetcode-cn.com/circle/discuss/XXGdoF</a></p>\n<p>[2]<a href=\"https://blog.csdn.net/justloveyou_/article/details/78303617?spm=1001.2014.3001.5501\">https://blog.csdn.net/justloveyou_/article/details/78303617?spm=1001.2014.3001.5501</a></p>\n<p>[3]<a href=\"http://www.cyc2018.xyz/\">http://www.cyc2018.xyz/</a></p>\n","categories":["计算机网络"],"tags":["面试"]}]